<?php

/**
 * @file
 * Contains install and update for Varbase Media module.
 */

use Drupal\file\Entity\File;
use Drupal\embed\Entity\EmbedButton;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\File\Exception\FileException;
use Vardot\Installer\ModuleInstallerFactory;

// Include all helpers and updates.
include_once __DIR__ . '/includes/helpers.inc';
include_once __DIR__ . '/includes/updates.inc';

/**
 * Implements hook_install().
 */
function varbase_media_install() {

  // Processor for install: in varbase_media.info.yml file.
  ModuleInstallerFactory::installList('varbase_media');

  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_media', '/^field.storage.*\\.(yml)$/i');
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_media', '/^.*(settings.yml)$/i');
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_media', '/^entity_browser_enhanced.widgets.*\\.(yml)$/i');
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_media', '/^views.view.*\\.(yml)$/i');

  $module_path = Drupal::service('module_handler')->getModule('varbase_media')->getPath();

  // Load Media types icons for the media library table view page.
  $source = $module_path . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  $files = \Drupal::service('file_system')->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      \Drupal::service('file_system')->copy($file->uri, $destination, FileSystemInterface::EXISTS_ERROR);
    }
  }

  // Configure Entity Embed buttons.
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_media', '/^embed.button.*\\.(yml)$/i');

  // Add Icons for Entity Embed CKEditor Media Library and Gallery.
  if (!\Drupal::isConfigSyncing()) {

    $embed_buttons = [
      // CKEditor Embed Media Library icon for the gallery embed entity button.
      'media' => [
        'source' => DRUPAL_ROOT . '/' . $module_path . '/images/ckeditor/hidpi/embed-media.png',
        'destination' => 'public://embed-media.png',
      ],
      // CKEditor Embed Gallery icon for the gallery embed entity button.
      'gallery' => [
        'source' => DRUPAL_ROOT . '/' . $module_path . '/images/ckeditor/hidpi/embed-gallery.png',
        'destination' => 'public://embed-gallery.png',
      ],
    ];

    foreach ($embed_buttons as $embed_button_id => $embed_button_info) {
      $target_destination = NULL;
      try {
        $target_destination = Drupal::service('file_system')->copy($embed_button_info['source'], $embed_button_info['destination']);
      }
      catch (FileException $e) {
        $target_destination = FALSE;
      }

      if ($target_destination) {
        $target_file = File::create(['uri' => $target_destination]);
        $target_file->save();

        EmbedButton::load($embed_button_id)->set('icon', EmbedButton::convertImageToEncodedData($target_file->getFileUri()))->save();
      }
      else {
        return t("Unable to copy @source to the public files directory.", [
          '@source' => $embed_button_info['source'],
        ]);
      }
    }
  }

  // Add permissions.
  ModuleInstallerFactory::addPermissions('varbase_media');
}

/**
 * Implements hook_requirements().
 */
function varbase_media_requirements($phase) {
  $requirements = [];

  if ($phase == 'install') {
    $destination = \Drupal::config('media.settings')->get('icon_base_uri');
    \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
    $is_writable = is_writable($destination);
    $is_directory = is_dir($destination);
    if (!$is_writable || !$is_directory) {
      if (!$is_directory) {
        $error = t('The directory %directory does not exist.', ['%directory' => $destination]);
      }
      else {
        $error = t('The directory %directory is not writable.', ['%directory' => $destination]);
      }
      $description = t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
      if (!empty($error)) {
        $description = $error . ' ' . $description;
        $requirements['varbase_media']['description'] = $description;
        $requirements['varbase_media']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }

  return $requirements;
}
