<?php

/**
 * @file
 * Contains install and update for Varbase Media module.
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Config\StorageInterface;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\ExtensionInstallStorage;

/**
 * Implements hook_install().
 */
function varbase_media_install() {

  $module_name = preg_replace('/_install$/', '', __FUNCTION__);
  $module_path = Drupal::service('module_handler')->getModule($module_name)->getPath();

  // Processer for install: in [$module_name].info.yml file.
  // --------------------------------------------------------------------------.
  $module_info_file = $module_path . '/' . $module_name . '.info.yml';
  if (file_exists($module_info_file)) {
    $module_info_data = (array) Yaml::parse(file_get_contents($module_info_file));
    if (isset($module_info_data['install'])
      && is_array($module_info_data['install'])) {
      \Drupal::service('module_installer')->install($module_info_data['install'], TRUE);
    }
  }

  // Install optional configs.
  $optional_install_path = $module_path . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
  if (is_dir($optional_install_path)) {
    $config_installer = \Drupal::service('config.installer');
    $config_installer->installDefaultConfig('module', $module_name);

    // Create field storage configs first in active config.
    $storage_config_files = file_scan_directory($optional_install_path, '/^field.storage.*\\.(yml)$/i');
    if (isset($storage_config_files) && is_array($storage_config_files)) {
      foreach ($storage_config_files as $storage_config_file) {
        $storage_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $storage_config_file->uri);
        $storage_config_file_data = (array) Yaml::parse($storage_config_file_content);
        $config_factory = \Drupal::configFactory()->getEditable($storage_config_file->name);
        $config_factory->setData($storage_config_file_data)->save(TRUE);
      }
    }

    // Install any optional config the module provides.
    $storage = new FileStorage($optional_install_path, StorageInterface::DEFAULT_COLLECTION);
    $config_installer->installOptionalConfig($storage, '');

    // Have the .settings.yml configs into the active config.
    $settings_config_files = file_scan_directory($optional_install_path, '/^.*\\.(settings.yml)$/i');
    if (isset($settings_config_files) && is_array($settings_config_files)) {
      foreach ($settings_config_files as $settings_config_file) {
        $settings_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $settings_config_file->uri);
        $settings_config_file_data = (array) Yaml::parse($settings_config_file_content);
        $config_factory = \Drupal::configFactory()->getEditable($settings_config_file->name);
        $config_factory->setData($settings_config_file_data)->save(TRUE);
      }
    }
  }
  // --------------------------------------------------------------------------.
  // Configure widgets for entity browser enhanced behaviours.
  $ebe_widgets_config_files = file_scan_directory($optional_install_path, '/^entity_browser_enhanced.widgets.*\\.(yml)$/i');
  if (isset($ebe_widgets_config_files)
    && is_array($ebe_widgets_config_files)) {
    foreach ($ebe_widgets_config_files as $ebe_widgets_config_file) {
      $ebe_widgets_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $ebe_widgets_config_file->uri);
      $ebe_widgets_config_file_data = (array) Yaml::parse($ebe_widgets_config_file_content);
      $ebe_widgets_config_factory = \Drupal::configFactory()->getEditable($ebe_widgets_config_file->name);
      $ebe_widgets_config_factory->setData($ebe_widgets_config_file_data)->save(TRUE);
    }
  }

  // Ovarride the media liabrary view.
  $config_path = $optional_install_path . '/' . 'views.view.media_library.yml';
  $config_content = file_get_contents($config_path);
  $config_data = (array) Yaml::parse($config_content);
  $config_factory = \Drupal::configFactory()->getEditable('views.view.media_library');
  $config_factory->setData($config_data)->save(TRUE);

  // Load Media types icons for the media libraray table view page.
  $source = $module_path . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_ERROR);
    }
  }

  // Add CKEditor Embed Media Library and Embed Gallery Icons.
  if (!\Drupal::isConfigSyncing()) {

    // CKEditor Embed Media Library icon for the gallery embed entity button.
    $embed_media_data = file_get_contents(DRUPAL_ROOT . '/' . $module_path . '/images/ckeditor/hidpi/embed-media.png');
    /** @var \Drupal\file\FileInterface $file */
    $embed_media_file = file_save_data($embed_media_data, 'public://embed-media.png', FILE_EXISTS_REPLACE);
    // Set file uuid same as default config.
    $embed_media_uuid = (new ExtensionInstallStorage(\Drupal::service('config.storage')))->read('embed.button.media')['icon_uuid'];
    $embed_media_file->set('uuid', $embed_media_uuid);
    $embed_media_file->save();
    \Drupal::service('file.usage')->add($embed_media_file, 'embed', 'embed_button', 'media');

    // CKEditor Embed Gallery icon for the gallery embed entity button.
    $embed_gallery_data = file_get_contents(DRUPAL_ROOT . '/' . $module_path . '/images/ckeditor/hidpi/embed-gallery.png');
    /** @var \Drupal\file\FileInterface $file */
    $embed_gallery_file = file_save_data($embed_gallery_data, 'public://embed-gallery.png', FILE_EXISTS_REPLACE);
    // Set file uuid same as default config.
    $embed_gallery_uuid = (new ExtensionInstallStorage(\Drupal::service('config.storage')))->read('embed.button.gallery')['icon_uuid'];
    $embed_gallery_file->set('uuid', $embed_gallery_uuid);
    $embed_gallery_file->save();
    \Drupal::service('file.usage')->add($embed_gallery_file, 'embed', 'embed_button', 'gallery');
  }

}

/**
 * Implements hook_requirements().
 */
function varbase_media_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    $destination = \Drupal::config('media.settings')->get('icon_base_uri');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $is_writable = is_writable($destination);
    $is_directory = is_dir($destination);
    if (!$is_writable || !$is_directory) {
      if (!$is_directory) {
        $error = t('The directory %directory does not exist.', ['%directory' => $destination]);
      }
      else {
        $error = t('The directory %directory is not writable.', ['%directory' => $destination]);
      }
      $description = t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
      if (!empty($error)) {
        $description = $error . ' ' . $description;
        $requirements['varbase_media']['description'] = $description;
        $requirements['varbase_media']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 * Add Media gallery and icon.
 */
function varbase_media_update_8700() {

  $module_path = Drupal::service('module_handler')->getModule('varbase_media')->getPath();

  $source = $module_path . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_ERROR);
    }
  }

}
